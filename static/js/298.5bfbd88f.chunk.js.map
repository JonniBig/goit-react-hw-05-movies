{"version":3,"file":"static/js/298.5bfbd88f.chunk.js","mappings":"wQAWA,EATmB,SAAC,GAAuB,IAAtBA,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC3B,OACE,2BACE,oCAAYD,MACZ,uBAAIC,MAGT,ECsDD,EA1DgB,WACd,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAsCE,EAAAA,EAAAA,UAAS,CAC7CC,QAAS,GACTC,WAAW,EACXC,UAAU,EACVC,aAAc,0CAJhB,eAAOC,EAAP,KAAoBC,EAApB,KA2BA,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAEID,GAAe,SAAAE,GAAI,yBAAUA,GAAV,IAAgBN,WAAW,GAA3B,IAFvB,UAG0BO,EAAAA,EAAAA,IAAUX,GAHpC,OAGUG,EAHV,OAIIK,GAAe,SAAAE,GAAI,yBAAUA,GAAV,IAAgBP,QAAAA,GAAhB,IAJvB,gDAMIK,GAAe,SAAAE,GAAI,yBACdA,GADc,IAEjBL,UAAU,EACVC,aAAc,KAAMM,SAHH,IANvB,yBAYIJ,GAAe,SAAAE,GAAI,yBAAUA,GAAV,IAAgBN,WAAW,GAA3B,IAZvB,6EAFc,sBACTJ,GADS,mCAiBda,EACD,GAAE,CAACb,KAGF,gCACGO,EAAYF,WACX,0BACE,uBAAIE,EAAYD,iBAGnBC,EAAYH,YACX,0BACE,wCAG4B,IAA/BG,EAAYJ,QAAQW,QACnB,4DAEA,wBACGP,EAAYJ,QAAQY,KAAI,SAAAjB,GAAM,OAC7B,SAAC,EAAD,CAEEA,OAAQA,EAAOA,OACfC,QAASD,EAAOC,SAFXD,EAAOE,GAFe,QAWxC,C","sources":["components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React from 'react';\n\nconst ReviewItem = ({author, content}) => {\n  return (\n    <li>\n      <p>Author: {author}</p>\n      <p>{content}</p>\n    </li>\n  );\n}\n\nexport default ReviewItem;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReview } from 'services/getTrendingMovies';\nimport ReviewItem from 'components/ReviewItem/ReviewItem';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviewState, setReviewState] = useState({\n    reviews: [],\n    isLoading: false,\n    hasError: false,\n    errorMessage: 'Something went wrong! Try again later',\n  });\n\n  useEffect(() => {\n    if (!id) return;\n    async function fetchReviews() {\n      try {\n        setReviewState(prev => ({ ...prev, isLoading: true }));\n        const reviews = await getReview(id);\n        setReviewState(prev => ({ ...prev, reviews }));\n      } catch (error) {\n        setReviewState(prev => ({\n          ...prev,\n          hasError: true,\n          errorMessage: error.message,\n        }));\n      } finally {\n        setReviewState(prev => ({ ...prev, isLoading: false }));\n      }\n    }\n    fetchReviews();\n  }, [id]);\n\n  return (\n    <>\n      {reviewState.hasError && (\n        <div>\n          <p>{reviewState.errorMessage}</p>\n        </div>\n      )}\n      {reviewState.isLoading && (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )}\n      {reviewState.reviews.length === 0 ? (\n        <p>No reviews for this movie found</p>\n      ) : (\n        <ul>\n          {reviewState.reviews.map(author => (\n            <ReviewItem\n              key={author.id}\n              author={author.author}\n              content={author.content}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["author","content","id","useParams","useState","reviews","isLoading","hasError","errorMessage","reviewState","setReviewState","useEffect","prev","getReview","message","fetchReviews","length","map"],"sourceRoot":""}