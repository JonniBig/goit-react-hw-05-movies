{"version":3,"file":"static/js/715.e88438b7.chunk.js","mappings":"qPAeA,EAVkB,SAAC,GAA0C,IAAxCA,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACxC,OACE,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMH,GAAYI,GAAE,kBAAaN,GAAhD,UACE,gBAAKO,IAAG,UANK,mCAML,OAAoBJ,GAAeK,IAAKP,OAF3CD,EAMZ,E,kBCZD,EAA4B,yBCoF5B,EA/Ee,WACb,OAAwCS,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMT,GAAWU,EAAAA,EAAAA,MACjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCN,EAAAA,EAAAA,UACtC,yCADF,eAAOO,EAAP,KAAqBC,EAArB,KAIMC,EAAQZ,EAAaa,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,oGAEIP,GAAa,GAFjB,UAG0BQ,EAAAA,EAAAA,GAAeH,GAHzC,OAGUI,EAHV,OAIIX,EAAeW,GAJnB,gDAMIP,GAAS,GACTE,EAAgB,KAAMM,SAP1B,yBASIV,GAAa,GATjB,6EAFc,sBACTK,GADS,mCAcdM,EACD,GAAE,CAACN,IAOJ,OACE,iCACE,kBAAMO,SAPW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAcF,EAAEG,cAAcC,SAASC,YAAYC,MACzDzB,EAAgB,CAAEW,MAAOU,GAC1B,EAGG,WACE,4BACE,kBACEK,KAAK,cACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBACZC,UAAQ,OAGZ,mBAAQJ,KAAK,SAAb,wBAEF,+BACGpB,IACC,0BACE,uBAAIE,MAGPJ,IACC,0BACE,yCAGJ,eAAI2B,UAAWC,EAAf,SACmB,IAAhB9B,GACCA,EAAY+B,KAAI,SAAAC,GACd,OACE,SAAC,EAAD,CAEE7C,MAAO6C,EAAM7C,MACbD,GAAI8C,EAAM9C,GACVE,SAAUA,EACVC,YAAa2C,EAAM3C,aAJd2C,EAAM9C,GAOhB,WAKZ,C,qLC/EK+C,E,OAAYC,EAAAA,OAAa,CAC7BC,QAAS,CACPC,cAAc,UAAD,OAJf,0NAQWC,EAAiB,mCAAG,sGACRJ,EAAUxB,IAC/B,kEAF6B,uBACvB6B,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qDAQjBC,EAAQ,mCAAG,WAAMC,GAAN,yFACCP,EAAUxB,IAAV,6CACiB+B,IAFlB,uBACdF,EADc,EACdA,KADc,kBAKfA,GALe,2CAAH,sDAQRG,EAAO,mCAAG,WAAMD,GAAN,yFACEP,EAAUxB,IAAV,6CACiB+B,EADjB,aADF,uBACbF,EADa,EACbA,KADa,kBAIdA,EAAKI,MAJS,2CAAH,sDAOPC,EAAS,mCAAG,WAAMH,GAAN,yFACAP,EAAUxB,IAAV,6CACiB+B,EADjB,aADA,uBACfF,EADe,EACfA,KADe,kBAKhBA,EAAKM,SALW,2CAAH,sDAQTjC,EAAc,mCAAG,WAAMkC,GAAN,yFACLZ,EAAUxB,IAAV,0DAC8BoC,IAFzB,uBACpBP,EADoB,EACpBA,KADoB,kBAKrBA,EAAKM,SALgB,2CAAH,qD","sources":["components/MovieItem/MovieItem.jsx","webpack://react-homework-template/./src/pages/Movie.module.css?a63c","pages/Movies.jsx","services/getTrendingMovies.jsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst baseImageUrl = 'https://image.tmdb.org/t/p/w300';\n\nconst MovieItem = ({ id, title, location, poster_path }) => {\n  return (\n    <li key={id}>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        <img src={`${baseImageUrl}${poster_path}`} alt={title} />\n      </Link>\n    </li>\n  );\n};\n\nexport default MovieItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"MovieList\":\"Movie_MovieList__AbpTh\"};","import MovieItem from 'components/MovieItem/MovieItem';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { getMovieSearch } from 'services/getTrendingMovies';\nimport css from './Movie.module.css';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const [MovieSearch, setMovieSearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\n    'Something went wrong! Try again later'\n  );\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    async function fetchMovieSearch() {\n      try {\n        setIsLoading(true);\n        const mSearch = await getMovieSearch(query);\n        setMovieSearch(mSearch);\n      } catch (error) {\n        setError(true);\n        setErrorMessage(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovieSearch();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchValue = e.currentTarget.elements.searchMovie.value;\n    setSearchParams({ query: searchValue });\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            name=\"searchMovie\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies...\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      <section>\n        {error && (\n          <div>\n            <p>{errorMessage}</p>\n          </div>\n        )}\n        {isLoading && (\n          <div>\n            <p>Loading...</p>\n          </div>\n        )}\n        <ul className={css.MovieList}>\n          {MovieSearch !== 0 &&\n            MovieSearch.map(movie => {\n              return (\n                <MovieItem\n                  key={movie.id}\n                  title={movie.title}\n                  id={movie.id}\n                  location={location}\n                  poster_path={movie.poster_path}\n                />\n              );\n            })}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst token =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjOTNkN2JiMGI5M2ZlMDM3MmQ4YTZkNDJkOGE5NGNhOCIsInN1YiI6IjY1MmFmZjY3ZWE4NGM3MDBhZWYyOGFmZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.JoJ09IKYIcQbLxtX-lIS9ov1ytunDzmtILtaCy1xGqw';\n\nconst authAxios = axios.create({\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await authAxios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?language=en-US'\n  );\n\n  return data;\n};\n\nexport const getMovie = async movieId => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}`\n  );\n\n  return data;\n};\n\nexport const getCast = async movieId => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits`\n  );\n  return data.cast;\n};\n\nexport const getReview = async movieId => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews`\n  );\n\n  return data.results;\n};\n\nexport const getMovieSearch = async movieName => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${movieName}`\n  );\n\n  return data.results;\n};\n"],"names":["id","title","location","poster_path","state","from","to","src","alt","useSearchParams","searchParams","setSearchParams","useLocation","useState","MovieSearch","setMovieSearch","isLoading","setIsLoading","error","setError","errorMessage","setErrorMessage","query","get","useEffect","getMovieSearch","mSearch","message","fetchMovieSearch","onSubmit","e","preventDefault","searchValue","currentTarget","elements","searchMovie","value","name","type","autoComplete","autoFocus","placeholder","required","className","css","map","movie","authAxios","axios","headers","Authorization","getTrendingMovies","data","getMovie","movieId","getCast","cast","getReview","results","movieName"],"sourceRoot":""}